rule EPackage2Schema 
transform package : IN!EPackage 
to schema : OUT!Schema {
	var eClasses = package.EClass.equivalents();
	"Printing classes".println();
	eClasses.println();
	for (element in eClasses) {
		("Element is EClass: " + element).println();
		schema.tables.add(package.EClass.equivalent());
		//schema.tables.add(element); // May need to use equivalents(), but it causes the error: relational.impl.ColumnImpl
									// when the second EClass Column fails to be added. 
		"Added element to Schema table".println();
	} 
}

@lazy
rule EClass2Table
transform class : IN!EClass
to table : OUT!Table, 
column : OUT!Column,
columnType : OUT!ColumnType,
primaryKey : OUT!PrimaryKeyConstraint {
	("Class to table: " + class).println();
	table.name = class.name;
	"Set name of table".println();
	column.name = "id";
	"Set Column name".println();
	
//	columnType.dataType = SQLDataType#NUMBER; // Error: Cannot find enumeration literal SQLDataType#NUMBER in model IN
//	"Set columnType data type".println();
	
	column.type = columnType;
	"Added columnType to Column".println();
	
	primaryKey.belongingTable = table;
	"Connected primary key and table".println();
	primaryKey.definedOnColumns.add(column);
	"Added primary key constraint on Column".println();
	
	table.columns.add(column);
	"Added Column to table".println();
	"".println();
	
//	class.EAttributes.equivalent().println();
	for (attribute in class.EAttributes.equivalents()) {
		attribute.println();
		table.columns.add(attribute); // Somehow produces an error with unknown reason...
	}
//	table.columns.add(class.EAttributes.equivalent());
	
}


@lazy
rule EAttribute2Column
transform attribute : IN!EAttribute
to column : OUT!Column, columnType : OUT!ColumnType {
	
	"Made a new Column based on attribute".println();
	("attribute: " + attribute.eAttributeType).println();

	switch (attribute.eAttributeType.name) {
		case "EString" : {
			"string".println(); 
			columnType.size = 4000;
			}
		case "EEnum" : {
			"enum".println(); 
			columnType.size = 2; 
			columnType.decimalPlaces = 0;
			columnType.dataType = SQLDataType#NUMBER; // Still does not work due to: Cannot find enumeration literal SQLDataType#NUMBER in model IN
			}
		case "ELong" : {
			"Long".println();
			columnType.size = 32; 
			columnType.decimalPlaces = 0;
			columnType.dataType = SQLDataType#NUMBER;
			}
		case "EInteger" : {
			"Int".println();
			columnType.size = 32; 
			columnType.decimalPlaces = 0;
			columnType.dataType = SQLDataType#NUMBER;
			} 
		case "EShort" : {
			"Short".println();
			columnType.size = 32; 
			columnType.decimalPlaces = 0;
			columnType.dataType = SQLDataType#NUMBER;
			}
		case "EByte" : {
			"Byte".println();
			columnType.size = 32; 
			columnType.decimalPlaces = 0;
			columnType.dataType = SQLDataType#NUMBER;
			}
		case "EFloat" : {
			"Float".println();
			columnType.size = 32; 
			columnType.decimalPlaces = 4;
			columnType.dataType = SQLDataType#NUMBER;
			}
		case "EDouble" : {
			"Double".println();
			columnType.size = 32; 
			columnType.decimalPlaces = 4;
			columnType.dataType = SQLDataType#NUMBER;
			}
		case "EBoolean" : {
			"Boolean".println();
			columnType.size = 1; 
			columnType.decimalPlaces = 0;
			columnType.dataType = SQLDataType#NUMBER;
			}
		default : "Did not recognize attribute".println();
	}
	column.type = columnType;
	"Added columnType to column".println();	
}




